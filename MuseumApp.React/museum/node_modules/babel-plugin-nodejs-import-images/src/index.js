/**
 * Created at 16/5/15.
 * @Author Ling.
 * @Email i@zeroling.com
 */

function matchImages (sourceName) {
  "use strict";
  const fileExt = sourceName.match(/\.(jpe?g|tiff?|png|svg|gif|webp)$/);
  return (fileExt || [, null])[1];
}

export default ({types}) => ({
  visitor: {
    ImportDeclaration (path) {
      // path.node.specifiers
      const source = path.node.source;
      if (source && source['type'] === 'StringLiteral' && matchImages(source['value'])) {
        let id = source;
        for (let specifier of path.node.specifiers) {
          if (specifier.type === 'ImportDefaultSpecifier') {
            id = specifier.local.name;
            break;
          }
        }
        path.replaceWith(types.variableDeclaration('const', [types.variableDeclarator(
          types.identifier(id),
          types.identifier(`require('fs').readFileSync('${source.value}')`)
        )]));
      }
    },
    CallExpression (path) {
      const src = path.node.arguments[0] && path.node.arguments[0]['value'];
      if (src && matchImages(src)) {
        if (path.node.callee.type === 'Identifier' && path.node.callee.name === 'require') {
          // require()
          path.replaceWith(
            types.identifier(`require('fs').readFileSync('${src}')`)
          )
        } else if (path.node.callee.type === 'MemberExpression'  && path.node.callee.property.name === 'ensure') {
          // todo require.ensure()
        }
      }
    }
  }
});
