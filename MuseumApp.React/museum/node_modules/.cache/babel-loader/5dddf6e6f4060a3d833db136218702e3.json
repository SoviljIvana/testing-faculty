{"ast":null,"code":"var _jsxFileName = \"C:\\\\MuseumAPP\\\\museum project- faks\\\\MuseumApp\\\\MuseumApp.React\\\\museum\\\\src\\\\components\\\\ExhibitActions\\\\ShowAllExhibits.jsx\";\nimport React, { Component } from 'react';\nimport { NotificationManager } from 'react-notifications';\nimport { serviceConfig } from '../../AppSettings';\nimport { Row, Table, Button } from 'react-bootstrap';\nimport Spinner from '../Spinner';\n\nclass ShowAllExhibits extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      exhibits: [],\n      isLoading: true\n    };\n    this.exhibitDetails = this.exhibitDetails.bind(this);\n    this.removeExhibit = this.removeExhibit.bind(this);\n    this.editExhibit = this.editExhibit.bind(this);\n  }\n\n  componentDidMount() {\n    this.getExhibits();\n  }\n\n  getExhibits() {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + localStorage.getItem('jwt')\n      }\n    };\n    this.setState({\n      isLoading: true\n    });\n    fetch(`${serviceConfig.baseURL}/api/Exhibits/get`, requestOptions).then(response => {\n      if (!response.ok) {\n        return Promise.reject(response);\n      }\n\n      return response.json();\n    }).then(data => {\n      if (data) {\n        this.setState({\n          exhibits: data,\n          isLoading: false\n        });\n      }\n    }).catch(response => {\n      NotificationManager.error(response.message || response.statusText);\n      this.setState({\n        isLoading: false\n      });\n    });\n  }\n\n  removeExhibit(id) {\n    const requestOptions = {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + localStorage.getItem('jwt')\n      }\n    };\n    fetch(`${serviceConfig.baseURL}/api/exhibits/delete/${id}`, requestOptions).then(response => {\n      if (!response.ok) {\n        return Promise.reject(response);\n      }\n\n      return response.statusText;\n    }).then(result => {\n      NotificationManager.success('Uspešno izbrisan eksponat sa id: ' + id);\n      const newState = this.state.exhibits.filter(exhibit => {\n        return exhibit.id !== id;\n      });\n      this.setState({\n        auditoriums: newState\n      });\n    }).catch(response => {\n      NotificationManager.error(\"Neuspešno brisanje eksponata.\");\n      this.setState({\n        submitted: false\n      });\n    });\n  }\n\n  fillTableWithDaata() {\n    return this.state.exhibits.map(exhibit => {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: exhibit.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 20\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }\n      }, exhibit.name), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }\n      }, exhibit.year), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }\n      }, exhibit.picturePath), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"dark\",\n        width: \"1%\",\n        className: \"text-center cursor-pointer\",\n        onClick: () => this.exhibitDetails(exhibit.exhibitId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }\n      }, \"vidi detalje\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"dark\",\n        width: \"1%\",\n        className: \"text-center cursor-pointer\",\n        onClick: () => this.editExhibit(exhibit.exhibitId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }\n      }, \"izmeni\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"dark\",\n        width: \"1%\",\n        className: \"text-center cursor-pointer\",\n        onClick: () => this.removeExhibit(exhibit.exhibitId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }\n      }, \"obri\\u0161i\"), \" \"));\n    });\n  }\n\n  exhibitDetails(id) {\n    this.props.history.push(`exhibitDetails/${id}`);\n  }\n\n  editExhibit(id) {\n    this.props.history.push(`editExhibit/${id}`);\n  }\n\n  render() {\n    const {\n      isLoading\n    } = this.state;\n    const rowsData = this.fillTableWithDaata();\n    const table = /*#__PURE__*/React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      responsive: true,\n      striped: true,\n      variant: \"dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 24\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }, \"Naziv\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }, \"Godina porekla\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }\n    }, \"Slika\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }, \"Detalji\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }\n    }, \"Izmene\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }\n    }, \"Brisanje\")), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, rowsData));\n    const showTable = isLoading ? /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 39\n      }\n    }) : table;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }, showTable));\n  }\n\n}\n\nexport default ShowAllExhibits;","map":{"version":3,"sources":["C:/MuseumAPP/museum project- faks/MuseumApp/MuseumApp.React/museum/src/components/ExhibitActions/ShowAllExhibits.jsx"],"names":["React","Component","NotificationManager","serviceConfig","Row","Table","Button","Spinner","ShowAllExhibits","constructor","props","state","exhibits","isLoading","exhibitDetails","bind","removeExhibit","editExhibit","componentDidMount","getExhibits","requestOptions","method","headers","localStorage","getItem","setState","fetch","baseURL","then","response","ok","Promise","reject","json","data","catch","error","message","statusText","id","result","success","newState","filter","exhibit","auditoriums","submitted","fillTableWithDaata","map","name","year","picturePath","exhibitId","history","push","render","rowsData","table","showTable"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { NotificationManager } from 'react-notifications';\r\nimport { serviceConfig } from '../../AppSettings';\r\nimport { Row, Table, Button } from 'react-bootstrap';\r\nimport Spinner from '../Spinner';\r\n\r\nclass ShowAllExhibits extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            exhibits: [],\r\n            isLoading: true,\r\n        }\r\n        this.exhibitDetails = this.exhibitDetails.bind(this);\r\n        this.removeExhibit = this.removeExhibit.bind(this);\r\n        this.editExhibit = this.editExhibit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getExhibits();\r\n    }\r\n\r\n    getExhibits() {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem('jwt')\r\n            }\r\n        };\r\n        this.setState({ isLoading: true });\r\n        fetch(`${serviceConfig.baseURL}/api/Exhibits/get`, requestOptions)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    return Promise.reject(response);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                if (data) {\r\n                    this.setState({\r\n                        exhibits: data,\r\n                        isLoading: false\r\n                    });\r\n                }\r\n            })\r\n            .catch(response => {\r\n                NotificationManager.error(response.message || response.statusText);\r\n                this.setState({ isLoading: false });\r\n            });\r\n    }\r\n\r\n    removeExhibit(id) {\r\n        const requestOptions = {\r\n          method: 'DELETE',\r\n          headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': 'Bearer ' + localStorage.getItem('jwt')\r\n          }\r\n         \r\n      };\r\n  \r\n      fetch(`${serviceConfig.baseURL}/api/exhibits/delete/${id}`, requestOptions)\r\n          .then(response => {\r\n              if (!response.ok) {\r\n                  return Promise.reject(response);\r\n              }\r\n              return response.statusText;\r\n          })\r\n          .then(result => {\r\n              NotificationManager.success('Uspešno izbrisan eksponat sa id: '+ id);\r\n              const newState = this.state.exhibits.filter(exhibit => {\r\n                  return exhibit.id !== id;\r\n              })\r\n              this.setState({auditoriums: newState});\r\n          })\r\n          .catch(response => {\r\n              NotificationManager.error(\"Neuspešno brisanje eksponata.\");\r\n              this.setState({ submitted: false });\r\n          });\r\n      }\r\n\r\n\r\n    fillTableWithDaata() {\r\n        return this.state.exhibits.map(exhibit => {\r\n            return <tr key={exhibit.id}>\r\n                <td>{exhibit.name}</td>\r\n                <td>{exhibit.year}</td>\r\n                <td>{exhibit.picturePath}</td>\r\n                <td><Button variant=\"dark\" width=\"1%\" className=\"text-center cursor-pointer\" onClick={() => this.exhibitDetails(exhibit.exhibitId)} >vidi detalje</Button></td>\r\n                <td><Button variant=\"dark\" width=\"1%\" className=\"text-center cursor-pointer\"  onClick={() => this.editExhibit(exhibit.exhibitId)} >izmeni</Button></td>\r\n                <td><Button variant=\"dark\" width=\"1%\" className=\"text-center cursor-pointer\"  onClick={() => this.removeExhibit(exhibit.exhibitId)}>obriši</Button> </td>\r\n            </tr>\r\n\r\n        })\r\n    }\r\n\r\n    exhibitDetails(id) {\r\n        this.props.history.push(`exhibitDetails/${id}`);\r\n    }\r\n    editExhibit(id) {\r\n        this.props.history.push(`editExhibit/${id}`);\r\n    }\r\n\r\n    render() {\r\n        const { isLoading } = this.state;\r\n        const rowsData = this.fillTableWithDaata();\r\n        const table = (<Table striped bordered hover responsive striped variant=\"dark\">\r\n            <thead>\r\n                <th>Naziv</th>\r\n                <th>Godina porekla</th>\r\n                <th>Slika</th>\r\n                <th>Detalji</th>\r\n                <th>Izmene</th>\r\n                <th>Brisanje</th>\r\n            </thead>\r\n            <tbody>\r\n                {rowsData}\r\n            </tbody>\r\n        </Table>);\r\n        const showTable = isLoading ? <Spinner></Spinner> : table;\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    {showTable}\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default ShowAllExhibits;"]},"metadata":{},"sourceType":"module"}