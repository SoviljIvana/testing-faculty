{"ast":null,"code":"var _jsxFileName = \"C:\\\\MuseumAPP\\\\museum project- faks\\\\MuseumApp\\\\MuseumApp.React\\\\museum\\\\src\\\\components\\\\UserAction\\\\EditUser.jsx\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { FormGroup, FormControl, Button, Container, Row, Col, FormText } from 'react-bootstrap';\nimport { NotificationManager } from 'react-notifications';\nimport { serviceConfig } from '../../AppSettings';\n\nclass EditUser extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstName: '',\n      lastName: '',\n      email: '',\n      id: 0,\n      yearOfBirth: '',\n      submitted: false,\n      canSubmit: true\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      id\n    } = this.props.match.params;\n    this.getUser(id);\n  }\n\n  getUser(userId) {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + localStorage.getItem('jwt')\n      }\n    };\n    fetch(`${serviceConfig.baseURL}/api/users/get/` + userId, requestOptions).then(response => {\n      if (!response.ok) {\n        return Promise.reject(response);\n      }\n\n      return response.json();\n    }).then(data => {\n      if (data) {\n        this.setState({\n          firstName: data.firstName,\n          lastName: data.lastName,\n          email: data.email,\n          yearOfBirth: data.yearOfBirth,\n          userId: data.userId,\n          id: data.id\n        });\n      }\n    }).catch(response => {\n      NotificationManager.error(response.message || response.statusText);\n      this.setState({\n        submitted: false\n      });\n    });\n  }\n\n  handleChange(e) {\n    const {\n      id,\n      value\n    } = e.target;\n    this.setState({\n      [id]: value\n    });\n    this.validate(id, value);\n  }\n\n  validate(id, value) {\n    if (id === 'name') {\n      if (value === '') {\n        this.setState({\n          titleError: 'Unesite naziv',\n          canSubmit: false\n        });\n      } else {\n        this.setState({\n          titleError: '',\n          canSubmit: true\n        });\n      }\n    }\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.setState({\n      submitted: true\n    });\n    const {\n      firstName,\n      lastName,\n      email,\n      yearOfBirth,\n      userId\n    } = this.state;\n\n    if (firstName && lastName && email && yearOfBirth && userId) {\n      this.updateUser();\n    } else {\n      NotificationManager.error('Molim vas popunite polje');\n      this.setState({\n        submitted: false\n      });\n    }\n  }\n\n  updateUser() {\n    const {\n      firstName,\n      lastName,\n      email,\n      yearOfBirth,\n      userId\n    } = this.state;\n    const data = {\n      UserId: userId,\n      FirstName: firstName,\n      LastName: lastName,\n      Email: email,\n      YearOfBirth: yearOfBirth\n    };\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + localStorage.getItem('jwt')\n      },\n      body: JSON.stringify(data)\n    };\n    console.log(JSON.stringify(\"REQ_OPT:\" + requestOptions.body));\n    fetch(`${serviceConfig.baseURL}/api/users/put/${userId}`, requestOptions).then(response => {\n      if (!response.ok) {\n        return Promise.reject(response);\n      }\n\n      return response.statusText;\n    }).then(data => {\n      if (data) {\n        this.setState({\n          firstName: data.firstName,\n          lastName: data.lastName,\n          email: data.email,\n          yearOfBirth: data.yearOfBirth\n        });\n      }\n    }).then(result => {\n      this.props.history.goBack();\n      NotificationManager.success('Uspešno izmenjeni podaci!');\n    }).catch(response => {\n      NotificationManager.error(\"Ne možete izmeniti podatke o korisniku. \");\n      this.setState({\n        submitted: false\n      });\n    });\n  }\n\n  render() {\n    const {\n      firstName,\n      lastName,\n      email,\n      yearOfBirth,\n      userId,\n      canSubmit,\n      submitted\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      id: \"firstName\",\n      type: \"text\",\n      placeholder: \"ime\",\n      value: firstName,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      id: \"lastName\",\n      type: \"text\",\n      placeholder: \"prezime\",\n      value: lastName,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      id: \"email\",\n      type: \"text\",\n      placeholder: \"email\",\n      value: email,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      id: \"yearOfBirth\",\n      type: \"text\",\n      placeholder: \"godina rodjenja\",\n      value: yearOfBirth,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      variant: \"danger\",\n      type: \"submit\",\n      disabled: submitted || !canSubmit,\n      block: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 29\n      }\n    }, \"Izmeni podatke o korisniku\")))));\n  }\n\n}\n\nexport default withRouter(EditUser);","map":{"version":3,"sources":["C:/MuseumAPP/museum project- faks/MuseumApp/MuseumApp.React/museum/src/components/UserAction/EditUser.jsx"],"names":["React","withRouter","FormGroup","FormControl","Button","Container","Row","Col","FormText","NotificationManager","serviceConfig","EditUser","Component","constructor","props","state","firstName","lastName","email","id","yearOfBirth","submitted","canSubmit","handleChange","bind","handleSubmit","componentDidMount","match","params","getUser","userId","requestOptions","method","headers","localStorage","getItem","fetch","baseURL","then","response","ok","Promise","reject","json","data","setState","catch","error","message","statusText","e","value","target","validate","titleError","preventDefault","updateUser","UserId","FirstName","LastName","Email","YearOfBirth","body","JSON","stringify","console","log","result","history","goBack","success","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { FormGroup, FormControl, Button, Container, Row, Col, FormText, } from 'react-bootstrap';\r\nimport { NotificationManager } from 'react-notifications';\r\nimport { serviceConfig } from '../../AppSettings';\r\n\r\nclass EditUser extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            id: 0,\r\n            yearOfBirth: '',            \r\n            submitted: false,\r\n            canSubmit: true\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { id } = this.props.match.params; \r\n        this.getUser(id);\r\n    }\r\n    getUser(userId) {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem('jwt')\r\n            }\r\n         \r\n        };\r\n    \r\n        fetch(`${serviceConfig.baseURL}/api/users/get/` + userId, requestOptions)\r\n            .then(response => {\r\n            if (!response.ok) {\r\n                return Promise.reject(response);\r\n            }\r\n            return response.json();\r\n            })\r\n            .then(data => {\r\n                if (data) {\r\n                    this.setState({firstName: data.firstName,\r\n                        lastName: data.lastName,\r\n                        email: data.email,\r\n                        yearOfBirth: data.yearOfBirth,\r\n                        userId: data.userId,\r\n                                   id: data.id});\r\n                }\r\n            })\r\n            .catch(response => {\r\n                NotificationManager.error(response.message || response.statusText);\r\n                this.setState({ submitted: false });\r\n            });\r\n        }\r\n    handleChange(e) {\r\n        const { id, value } = e.target;\r\n        this.setState({ [id]: value });\r\n      \r\n        this.validate(id, value);\r\n    }\r\n\r\n    validate(id, value) {\r\n        if (id === 'name') {\r\n            if (value === '') {\r\n                this.setState({titleError: 'Unesite naziv', \r\n                                canSubmit: false});\r\n            } else {\r\n                this.setState({titleError: '',\r\n                                canSubmit: true});\r\n            }\r\n        }\r\n    }    \r\n\r\n    handleSubmit(e) {\r\n\r\n        e.preventDefault();\r\n        this.setState({ submitted: true });\r\n        const {firstName, lastName, email, yearOfBirth, userId } = this.state;\r\n        if (firstName && lastName && email  && yearOfBirth && userId) {\r\n            this.updateUser();\r\n        } else {\r\n            NotificationManager.error('Molim vas popunite polje');\r\n            this.setState({ submitted: false });\r\n        }\r\n    }\r\n \r\n    updateUser() {\r\n\r\n        const { firstName, lastName, email, yearOfBirth, userId } = this.state;\r\n        const data = {\r\n            UserId: userId,\r\n            FirstName: firstName,\r\n            LastName: lastName, \r\n            Email: email,\r\n            YearOfBirth: yearOfBirth\r\n        };\r\n\r\n        const requestOptions = {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem('jwt')\r\n            },\r\n           \r\n            body: JSON.stringify(data)\r\n        };\r\n\r\n        console.log(JSON.stringify(\"REQ_OPT:\" + requestOptions.body));\r\n        \r\n        fetch(`${serviceConfig.baseURL}/api/users/put/${userId}`, requestOptions)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    return Promise.reject(response);\r\n                }\r\n                return response.statusText;\r\n            })\r\n            .then(data => {\r\n                if(data){\r\n                    this.setState({\r\n                        firstName : data.firstName,\r\n                        lastName: data.lastName,\r\n                        email: data.email,\r\n                        yearOfBirth: data.yearOfBirth\r\n                    });\r\n                }\r\n            })\r\n            .then(result => {\r\n                this.props.history.goBack();\r\n                NotificationManager.success('Uspešno izmenjeni podaci!');\r\n            })\r\n            .catch(response => {\r\n                NotificationManager.error(\"Ne možete izmeniti podatke o korisniku. \");\r\n                this.setState({ submitted: false });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const {firstName, lastName, email, yearOfBirth, userId ,canSubmit , submitted} = this.state;\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <form onSubmit={this.handleSubmit}>\r\n                        \r\n                            <FormGroup>\r\n                                <FormControl\r\n                                \r\n                                    id=\"firstName\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"ime\"\r\n                                    value={firstName}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <FormControl\r\n                                    id=\"lastName\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"prezime\"\r\n                                    value={lastName}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <FormControl\r\n                                    id=\"email\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"email\"\r\n                                    value={email}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <FormControl\r\n                                    id=\"yearOfBirth\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"godina rodjenja\"\r\n                                    value={yearOfBirth}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <Button  variant=\"danger\" type=\"submit\" disabled={submitted || !canSubmit} block>Izmeni podatke o korisniku</Button>\r\n                        </form>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\nexport default withRouter(EditUser);"]},"metadata":{},"sourceType":"module"}