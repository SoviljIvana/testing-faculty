{"ast":null,"code":"var _jsxFileName = \"C:\\\\MuseumAPP\\\\museum project- faks\\\\MuseumApp\\\\MuseumApp.React\\\\museum\\\\src\\\\components\\\\ExhibitionActions\\\\ComingSoonExhibitionsForUser.jsx\";\nimport React, { Component } from 'react';\nimport { NotificationManager } from 'react-notifications';\nimport { serviceConfig } from '../../AppSettings';\nimport { Button, CardColumns, Card, Container, ResponsiveEmbed } from 'react-bootstrap';\nimport Spinner from '../Spinner';\nimport * as Moment from 'moment';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nclass ComingSoonExhibitionsForUser extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      exhibitions: [],\n      isLoading: true\n    };\n    this.exhibitionDetails = this.exhibitionDetails.bind(this);\n  }\n\n  componentDidMount() {\n    this.getExhibitions();\n  }\n\n  getExhibitions() {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + localStorage.getItem('jwt')\n      }\n    };\n    this.setState({\n      isLoading: true\n    });\n    fetch(`${serviceConfig.baseURL}/api/Exhibitions/get/comingSoon`, requestOptions).then(response => {\n      if (!response.ok) {\n        return Promise.reject(response);\n      }\n\n      return response.json();\n    }).then(data => {\n      if (data) {\n        this.setState({\n          exhibitions: data,\n          isLoading: false\n        });\n      }\n    }).catch(response => {\n      NotificationManager.error(response.message || response.statusText);\n      this.setState({\n        isLoading: false\n      });\n    });\n  }\n\n  removeExhibition(id) {\n    const requestOptions = {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + localStorage.getItem('jwt')\n      }\n    };\n    fetch(`${serviceConfig.baseURL}/api/exhibitions/delete/${id}`, requestOptions).then(response => {\n      if (!response.ok) {\n        return Promise.reject(response);\n      }\n\n      return response.statusText;\n    }).then(result => {\n      NotificationManager.success('Uspešno izbrisana izložba sa id: ' + id);\n      const newState = this.state.exhibitions.filter(exhibition => {\n        return exhibition.id !== id;\n      });\n      this.setState({\n        auditoriums: newState\n      });\n    }).catch(response => {\n      NotificationManager.error(\"Ne možete izbrisati izložbu.\");\n      this.setState({\n        submitted: false\n      });\n    });\n  }\n\n  getAllExhibitions() {\n    return this.state.exhibitions.map(exhibition => {\n      return /*#__PURE__*/React.createElement(Card, {\n        className: \"center1\",\n        style: {\n          width: '20rem'\n        },\n        className: \"text-center\",\n        key: exhibition.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 24\n        }\n      }, /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"inner\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(ResponsiveEmbed, {\n        aspectRatio: \"4by3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Card.Img, {\n        variant: \"top\",\n        src: exhibition.picture,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 19\n        }\n      })))), /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        onClick: () => this.exhibitionDetails(exhibition.exhibitionId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 98\n        }\n      }, exhibition.exhibitionName)))), /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card.Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }\n      }, \" \", exhibition.about))), /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }\n      }, \"Otvaranje:  \", /*#__PURE__*/React.createElement(Card.Footer, {\n        className: \"text-muted\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 29\n        }\n      }, Moment(exhibition.startTime).format('LLL')), \"Zatvaranje: \", /*#__PURE__*/React.createElement(Card.Footer, {\n        className: \"text-muted\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 31\n        }\n      }, \"  \", Moment(exhibition.endTime).format('LLL'), \"    \")));\n    });\n  }\n\n  exhibitionDetails(id) {\n    this.props.history.push(`exhibitionDetails/${id}`);\n  }\n\n  render() {\n    const {\n      isLoading\n    } = this.state;\n    const exhibitionDetails = this.getAllExhibitions();\n    const exhibitions = isLoading ? /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 45\n      }\n    }) : /*#__PURE__*/React.createElement(Container, {\n      className: \"container-cards\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 66\n      }\n    }, \" \", exhibitionDetails, \" \");\n    return /*#__PURE__*/React.createElement(CardColumns, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 25\n      }\n    }, exhibitions);\n  }\n\n}\n\nexport default ComingSoonExhibitionsForUser;","map":{"version":3,"sources":["C:/MuseumAPP/museum project- faks/MuseumApp/MuseumApp.React/museum/src/components/ExhibitionActions/ComingSoonExhibitionsForUser.jsx"],"names":["React","Component","NotificationManager","serviceConfig","Button","CardColumns","Card","Container","ResponsiveEmbed","Spinner","Moment","ComingSoonExhibitionsForUser","constructor","props","state","exhibitions","isLoading","exhibitionDetails","bind","componentDidMount","getExhibitions","requestOptions","method","headers","localStorage","getItem","setState","fetch","baseURL","then","response","ok","Promise","reject","json","data","catch","error","message","statusText","removeExhibition","id","result","success","newState","filter","exhibition","auditoriums","submitted","getAllExhibitions","map","width","picture","exhibitionId","exhibitionName","about","startTime","format","endTime","history","push","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { NotificationManager } from 'react-notifications';\r\nimport { serviceConfig } from '../../AppSettings';\r\nimport {Button, CardColumns, Card ,Container,ResponsiveEmbed } from 'react-bootstrap';\r\nimport Spinner from '../Spinner'\r\nimport * as Moment from 'moment';  \r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nclass ComingSoonExhibitionsForUser extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            exhibitions: [],\r\n            isLoading: true\r\n        }\r\n        this.exhibitionDetails = this.exhibitionDetails.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n      this.getExhibitions();\r\n    }\r\n\r\n    getExhibitions(){\r\n        const requestOptions = {\r\n            method: 'GET' ,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem('jwt')\r\n            }\r\n           };\r\n            this.setState({isLoading: true});\r\n            fetch(`${serviceConfig.baseURL}/api/Exhibitions/get/comingSoon`, requestOptions)\r\n              .then(response => {\r\n                if (!response.ok) {\r\n                  return Promise.reject(response);\r\n              }\r\n              return response.json();\r\n              })\r\n              .then(data => {\r\n                if (data) {\r\n                  this.setState({ \r\n                    exhibitions: data,\r\n                       isLoading: false });\r\n                  }\r\n              })\r\n              .catch(response => {\r\n                  NotificationManager.error(response.message || response.statusText);\r\n                  this.setState({ isLoading: false });\r\n              });\r\n        }\r\n\r\n        removeExhibition(id) {\r\n            const requestOptions = {\r\n              method: 'DELETE',\r\n              headers: {\r\n                  'Content-Type': 'application/json',\r\n                  'Authorization': 'Bearer ' + localStorage.getItem('jwt')\r\n              }\r\n             \r\n          };\r\n      \r\n          fetch(`${serviceConfig.baseURL}/api/exhibitions/delete/${id}`, requestOptions)\r\n              .then(response => {\r\n                  if (!response.ok) {\r\n                      return Promise.reject(response);\r\n                  }\r\n                  return response.statusText;\r\n              })\r\n              .then(result => {\r\n                  NotificationManager.success('Uspešno izbrisana izložba sa id: '+ id);\r\n                  const newState = this.state.exhibitions.filter(exhibition => {\r\n                      return exhibition.id !== id;\r\n                  })\r\n                  this.setState({auditoriums: newState});\r\n              })\r\n              .catch(response => {\r\n                  NotificationManager.error(\"Ne možete izbrisati izložbu.\");\r\n                  this.setState({ submitted: false });\r\n              });\r\n          }\r\n    \r\n\r\n          getAllExhibitions() {\r\n\r\n            return this.state.exhibitions.map(exhibition => {\r\n                return <Card className = \"center1\" style={{ width: '20rem' }} className=\"text-center\"  key={exhibition.id}>\r\n                <Container>\r\n                    <div className=\"inner\">\r\n                    <ResponsiveEmbed aspectRatio=\"4by3\">\r\n                  <Card.Img variant=\"top\" src= {exhibition.picture} /> \r\n                  </ResponsiveEmbed>\r\n                 </div>\r\n                </Container>   \r\n                <Container >\r\n                    <Button>\r\n                    <Card.Header onClick={() => this.exhibitionDetails(exhibition.exhibitionId)}><h4 >{exhibition.exhibitionName}</h4></Card.Header>\r\n                    </Button>\r\n                </Container>\r\n                    <Card.Body>\r\n                <Container>\r\n                    <Card.Text> {exhibition.about}</Card.Text>\r\n                </Container>\r\n                </Card.Body>\r\n                <Container>\r\n                Otvaranje:  <Card.Footer className=\"text-muted\">\r\n                  { Moment(exhibition.startTime).format('LLL') }\r\n                </Card.Footer>\r\n                  Zatvaranje: <Card.Footer className=\"text-muted\">  {Moment(exhibition.endTime).format('LLL')}    </Card.Footer></Container>\r\n            </Card>\r\n            })\r\n        }\r\n        \r\n        exhibitionDetails(id){\r\n            this.props.history.push(`exhibitionDetails/${id}`);\r\n        }\r\n\r\n        render(){\r\n            const {isLoading} = this.state;\r\n            const exhibitionDetails = this.getAllExhibitions();\r\n            const exhibitions = isLoading ? <Spinner></Spinner> :<Container className= \"container-cards\"> {exhibitionDetails} </Container>;\r\n            return (\r\n                        <CardColumns>\r\n                        {exhibitions}\r\n                        </CardColumns>   \r\n        \r\n            );\r\n        }\r\n    }\r\n\r\nexport default ComingSoonExhibitionsForUser;"]},"metadata":{},"sourceType":"module"}