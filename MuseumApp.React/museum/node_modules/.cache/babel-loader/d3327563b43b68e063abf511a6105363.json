{"ast":null,"code":"var _jsxFileName = \"C:\\\\MuseumAPP\\\\museum project- faks\\\\MuseumApp\\\\MuseumApp.React\\\\museum\\\\src\\\\components\\\\ExhibitionActions\\\\ShowAllExhibitionsForUser.jsx\";\nimport React, { Component } from 'react';\nimport { NotificationManager } from 'react-notifications';\nimport { serviceConfig } from '../../AppSettings';\nimport { Container, Card, CardColumns, Button, ResponsiveEmbed } from 'react-bootstrap';\nimport Spinner from '../Spinner';\nimport * as Moment from 'moment';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nclass ShowAllExhibitionsForUser extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      exhibitions: [],\n      isLoading: true\n    };\n    this.exhibitionDetails = this.exhibitionDetails.bind(this);\n  }\n\n  componentDidMount() {\n    this.getExhibitions();\n  }\n\n  getExhibitions() {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + localStorage.getItem('jwt')\n      }\n    };\n    console.log(requestOptions);\n    this.setState({\n      isLoading: true\n    });\n    fetch(`http://localhost:44363/api/Exhibitions/get`, requestOptions).then(response => {\n      if (!response.ok) {\n        return Promise.reject(response);\n      }\n\n      return response.json();\n    }).then(data => {\n      if (data) {\n        this.setState({\n          exhibitions: data,\n          isLoading: false\n        });\n      }\n    }).catch(response => {\n      NotificationManager.error(response.message || response.statusText);\n      this.setState({\n        isLoading: false\n      });\n    });\n  }\n\n  getAllExhibitions() {\n    return this.state.exhibitions.map(exhibition => {\n      return /*#__PURE__*/React.createElement(Card, {\n        className: \"center1\",\n        style: {\n          width: '20rem'\n        },\n        className: \"text-center\",\n        key: exhibition.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 24\n        }\n      }, /*#__PURE__*/React.createElement(\"hr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 26\n        }\n      }), /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"inner\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(ResponsiveEmbed, {\n        aspectRatio: \"4by3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Card.Img, {\n        variant: \"top\",\n        src: exhibition.picture,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 19\n        }\n      })))), /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        onClick: () => this.exhibitionDetails(exhibition.exhibitionId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 99\n        }\n      }, exhibition.exhibitionName)))), /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card.Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }\n      }, \" \", exhibition.about))), /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }\n      }, \"Otvaranje:  \", /*#__PURE__*/React.createElement(Card.Footer, {\n        className: \"text-muted\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 29\n        }\n      }, Moment(exhibition.startTime).format('LLL')), \"Zatvaranje: \", /*#__PURE__*/React.createElement(Card.Footer, {\n        className: \"text-muted\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 31\n        }\n      }, \"  \", Moment(exhibition.endTime).format('LLL'), \"    \")), /*#__PURE__*/React.createElement(\"hr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 19\n        }\n      }));\n    });\n  }\n\n  exhibitionDetails(id) {\n    this.props.history.push(`exhibitionDetails/${id}`);\n  }\n\n  render() {\n    const {\n      isLoading\n    } = this.state;\n    const exhibitionDetails = this.getAllExhibitions();\n    const exhibitions = isLoading ? /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 45\n      }\n    }) : /*#__PURE__*/React.createElement(Container, {\n      className: \"container-cards\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 66\n      }\n    }, \" \", exhibitionDetails, \" \");\n    return /*#__PURE__*/React.createElement(CardColumns, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 29\n      }\n    }, \"exhibitions\"), exhibitions);\n  }\n\n}\n\nexport default ShowAllExhibitionsForUser;","map":{"version":3,"sources":["C:/MuseumAPP/museum project- faks/MuseumApp/MuseumApp.React/museum/src/components/ExhibitionActions/ShowAllExhibitionsForUser.jsx"],"names":["React","Component","NotificationManager","serviceConfig","Container","Card","CardColumns","Button","ResponsiveEmbed","Spinner","Moment","ShowAllExhibitionsForUser","constructor","props","state","exhibitions","isLoading","exhibitionDetails","bind","componentDidMount","getExhibitions","requestOptions","method","headers","localStorage","getItem","console","log","setState","fetch","then","response","ok","Promise","reject","json","data","catch","error","message","statusText","getAllExhibitions","map","exhibition","width","id","picture","exhibitionId","exhibitionName","about","startTime","format","endTime","history","push","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAmC,OAAnC;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,WAA1B,EAAuCC,MAAvC,EAA8CC,eAA9C,QAAoE,iBAApE;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,QAAxB;AAEA,OAAO,4CAAP;;AAEA,MAAMC,yBAAN,SAAwCV,SAAxC,CAAiD;AAC7CW,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAE,EADJ;AAETC,MAAAA,SAAS,EAAE;AAFF,KAAb;AAIA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AAEC;;AAELC,EAAAA,iBAAiB,GAAE;AACjB,SAAKC,cAAL;AACD;;AAEDA,EAAAA,cAAc,GAAE;AACZ,UAAMC,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,KADW;AAEnBC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,yBAAiB,YAAYC,YAAY,CAACC,OAAb,CAAqB,KAArB;AAFxB;AAFU,KAAvB;AAOAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,cAAZ;AACI,SAAKO,QAAL,CAAc;AAACZ,MAAAA,SAAS,EAAE;AAAZ,KAAd;AACAa,IAAAA,KAAK,CAAE,4CAAF,EAA+CR,cAA/C,CAAL,CACGS,IADH,CACQC,QAAQ,IAAI;AAChB,UAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,eAAOC,OAAO,CAACC,MAAR,CAAeH,QAAf,CAAP;AACH;;AACD,aAAOA,QAAQ,CAACI,IAAT,EAAP;AACC,KANH,EAOGL,IAPH,CAOQM,IAAI,IAAI;AAEZ,UAAIA,IAAJ,EAAU;AAER,aAAKR,QAAL,CAAc;AACZb,UAAAA,WAAW,EAAEqB,IADD;AAETpB,UAAAA,SAAS,EAAE;AAFF,SAAd;AAGC;AACJ,KAfH,EAgBGqB,KAhBH,CAgBSN,QAAQ,IAAI;AACf7B,MAAAA,mBAAmB,CAACoC,KAApB,CAA0BP,QAAQ,CAACQ,OAAT,IAAoBR,QAAQ,CAACS,UAAvD;AACA,WAAKZ,QAAL,CAAc;AAAEZ,QAAAA,SAAS,EAAE;AAAb,OAAd;AACH,KAnBH;AAoBH;;AAGDyB,EAAAA,iBAAiB,GAAG;AAEhB,WAAO,KAAK3B,KAAL,CAAWC,WAAX,CAAuB2B,GAAvB,CAA2BC,UAAU,IAAI;AAC5C,0BAAO,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAG,SAAlB;AAA4B,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAnC;AAAuD,QAAA,SAAS,EAAC,aAAjE;AAAgF,QAAA,GAAG,EAAED,UAAU,CAACE,EAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAGP,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACA,oBAAC,eAAD;AAAiB,QAAA,WAAW,EAAC,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACF,oBAAC,IAAD,CAAM,GAAN;AAAU,QAAA,OAAO,EAAC,KAAlB;AAAwB,QAAA,GAAG,EAAGF,UAAU,CAACG,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADE,CADA,CADJ,CAHO,eAUP,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACA,oBAAC,IAAD,CAAM,MAAN;AAAc,QAAA,OAAO,EAAE,MAAM,KAAK7B,iBAAL,CAAuB0B,UAAU,CAACI,YAAlC,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA8E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMJ,UAAU,CAACK,cAAjB,CAA9E,CADA,CADJ,CAVO,eAeH,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACJ,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAaL,UAAU,CAACM,KAAxB,CADJ,CADI,CAfG,eAoBP,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCACY,oBAAC,IAAD,CAAM,MAAN;AAAa,QAAA,SAAS,EAAC,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACRvC,MAAM,CAACiC,UAAU,CAACO,SAAZ,CAAN,CAA6BC,MAA7B,CAAoC,KAApC,CADQ,CADZ,+BAIc,oBAAC,IAAD,CAAM,MAAN;AAAa,QAAA,SAAS,EAAC,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAuCzC,MAAM,CAACiC,UAAU,CAACS,OAAZ,CAAN,CAA2BD,MAA3B,CAAkC,KAAlC,CAAvC,SAJd,CApBO,eAyBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAzBK,CAAP;AA4BH,KA7BM,CAAP;AA8BH;;AAEDlC,EAAAA,iBAAiB,CAAC4B,EAAD,EAAI;AACjB,SAAKhC,KAAL,CAAWwC,OAAX,CAAmBC,IAAnB,CAAyB,qBAAoBT,EAAG,EAAhD;AACH;;AAEDU,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACvC,MAAAA;AAAD,QAAc,KAAKF,KAAzB;AACA,UAAMG,iBAAiB,GAAG,KAAKwB,iBAAL,EAA1B;AACA,UAAM1B,WAAW,GAAGC,SAAS,gBAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAH,gBAAwB,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAE,iBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAA0CC,iBAA1C,MAArD;AACA,wBAEY,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAECF,WAFD,CAFZ;AAQH;;AAlGwC;;AAqGjD,eAAeJ,yBAAf","sourcesContent":["import React, { Component,  } from 'react';\r\nimport { NotificationManager } from 'react-notifications';\r\nimport { serviceConfig } from '../../AppSettings';\r\nimport { Container, Card, CardColumns, Button,ResponsiveEmbed} from 'react-bootstrap';\r\nimport Spinner from '../Spinner';\r\nimport * as Moment from 'moment';  \r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass ShowAllExhibitionsForUser extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            exhibitions: [],\r\n            isLoading: true,\r\n        }\r\n        this.exhibitionDetails = this.exhibitionDetails.bind(this);\r\n\r\n        }\r\n      \r\n    componentDidMount(){\r\n      this.getExhibitions();\r\n    }\r\n\r\n    getExhibitions(){\r\n        const requestOptions = {\r\n            method: 'GET' ,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem('jwt')\r\n            }\r\n        };\r\n        console.log(requestOptions);\r\n            this.setState({isLoading: true});\r\n            fetch(`http://localhost:44363/api/Exhibitions/get`, requestOptions)\r\n              .then(response => {\r\n                if (!response.ok) {\r\n                  return Promise.reject(response);\r\n              }\r\n              return response.json();\r\n              })\r\n              .then(data => {\r\n              \r\n                if (data) {\r\n                    \r\n                  this.setState({ \r\n                    exhibitions: data,\r\n                       isLoading: false });\r\n                  }\r\n              })\r\n              .catch(response => {\r\n                  NotificationManager.error(response.message || response.statusText);\r\n                  this.setState({ isLoading: false });\r\n              });\r\n        }   \r\n\r\n\r\n        getAllExhibitions() {\r\n\r\n            return this.state.exhibitions.map(exhibition => {\r\n                return <Card className = \"center1\" style={{ width: '20rem' }} className=\"text-center\"  key={exhibition.id}>\r\n                         <hr>\r\n                        </hr>\r\n                <Container>\r\n                    <div className=\"inner\">\r\n                    <ResponsiveEmbed aspectRatio=\"4by3\">\r\n                  <Card.Img variant=\"top\" src= {exhibition.picture} /> \r\n                  </ResponsiveEmbed>\r\n                 </div>\r\n                </Container>   \r\n                <Container >\r\n                    <Button>\r\n                    <Card.Header  onClick={() => this.exhibitionDetails(exhibition.exhibitionId)}><h4 >{exhibition.exhibitionName}</h4></Card.Header>\r\n                    </Button>\r\n                </Container>\r\n                    <Card.Body>\r\n                <Container>\r\n                    <Card.Text> {exhibition.about}</Card.Text>\r\n                </Container>\r\n                </Card.Body>\r\n                <Container>\r\n                Otvaranje:  <Card.Footer className=\"text-muted\">\r\n                  { Moment(exhibition.startTime).format('LLL') }\r\n                </Card.Footer>\r\n                  Zatvaranje: <Card.Footer className=\"text-muted\">  {Moment(exhibition.endTime).format('LLL')}    </Card.Footer></Container>\r\n                  <hr>\r\n                        </hr>\r\n            </Card>\r\n            })\r\n        }\r\n        \r\n        exhibitionDetails(id){\r\n            this.props.history.push(`exhibitionDetails/${id}`);\r\n        }\r\n\r\n        render(){\r\n            const {isLoading} = this.state;\r\n            const exhibitionDetails = this.getAllExhibitions();\r\n            const exhibitions = isLoading ? <Spinner></Spinner> :<Container className= \"container-cards\"> {exhibitionDetails} </Container>;\r\n            return (\r\n              \r\n                        <CardColumns>\r\n                            <h1>exhibitions</h1>\r\n                        {exhibitions}\r\n                        </CardColumns>   \r\n        \r\n            );\r\n        }\r\n    }\r\n\r\nexport default ShowAllExhibitionsForUser;"]},"metadata":{},"sourceType":"module"}