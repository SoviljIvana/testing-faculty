{"ast":null,"code":"var _jsxFileName = \"C:\\\\MuseumAPP\\\\museum project- faks\\\\MuseumApp\\\\MuseumApp.React\\\\museum\\\\src\\\\components\\\\ExhibitActions\\\\EditExhibit.jsx\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { FormGroup, FormControl, Button, Container, Row, Col, FormText } from 'react-bootstrap';\nimport { NotificationManager } from 'react-notifications';\nimport { serviceConfig } from '../../AppSettings';\n\nclass EditExhibit extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      year: 0,\n      picturePath: '',\n      exhibitId: 0,\n      exhibitionId: 0,\n      auditoriumId: 0,\n      submitted: false,\n      canSubmit: true\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      id\n    } = this.props.match.params;\n    this.getExhibit(id);\n  }\n\n  getExhibit(exhibitId) {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + localStorage.getItem('jwt')\n      }\n    };\n    fetch(`${serviceConfig.baseURL}/api/exhibits/get/` + exhibitId, requestOptions).then(response => {\n      if (!response.ok) {\n        return Promise.reject(response);\n      }\n\n      return response.json();\n    }).then(data => {\n      if (data) {\n        this.setState({\n          picturePath: data.picturePath,\n          exhibitId: data.exhibitId,\n          exhibitionId: data.exhibitionId,\n          auditoriumId: data.auditoriumId,\n          year: data.year,\n          name: data.name,\n          id: data.id\n        });\n      }\n    }).catch(response => {\n      NotificationManager.error(response.message || response.statusText);\n      this.setState({\n        submitted: false\n      });\n    });\n  }\n\n  handleChange(e) {\n    const {\n      id,\n      value\n    } = e.target;\n    this.setState({\n      [id]: value\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.setState({\n      submitted: true\n    });\n    const {\n      auditoriumId,\n      exhibitionId,\n      exhibitId,\n      name,\n      year,\n      picturePath\n    } = this.state;\n\n    if (auditoriumId && exhibitionId && exhibitId && name && year && picturePath) {\n      this.updateExhibit();\n    } else {\n      NotificationManager.error('Molim vas popunite polje.');\n      this.setState({\n        submitted: false\n      });\n    }\n  }\n\n  updateExhibit() {\n    const {\n      auditoriumId,\n      exhibitionId,\n      exhibitId,\n      name,\n      year,\n      picturePath\n    } = this.state;\n    const data = {\n      auditoriumId: auditoriumId,\n      exhibitionId: exhibitionId,\n      exhibitIdv: exhibitId,\n      name: name,\n      year: +year,\n      picturePath: picturePath\n    };\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + localStorage.getItem('jwt')\n      },\n      body: JSON.stringify(data)\n    };\n    console.log(JSON.stringify(\"REQ_OPT:\" + requestOptions.body));\n    fetch(`${serviceConfig.baseURL}/api/exhibits/put/${exhibitId}`, requestOptions).then(response => {\n      if (!response.ok) {\n        return Promise.reject(response);\n      }\n\n      return response.statusText;\n    }).then(data => {\n      if (data) {\n        this.setState({\n          name: data.name,\n          year: data.year,\n          picturePath: data.picturePath\n        });\n      }\n    }).then(result => {\n      this.props.history.goBack();\n      NotificationManager.success('Uspešno izmenjen eksponat!');\n    }).catch(response => {\n      NotificationManager.error(\"Ne možete izmeniti podatke o eksponatu. \");\n      this.setState({\n        submitted: false\n      });\n    });\n  }\n\n  render() {\n    const {\n      name,\n      year,\n      picturePath,\n      canSubmit,\n      submitted\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      id: \"name\",\n      type: \"text\",\n      placeholder: \"naziv\",\n      value: name,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      id: \"year\",\n      type: \"number\",\n      placeholder: \"godina\",\n      value: year,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      id: \"picturePath\",\n      type: \"text\",\n      placeholder: \"putanja do slike\",\n      value: picturePath,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      variant: \"danger\",\n      type: \"submit\",\n      disabled: submitted || !canSubmit,\n      block: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 29\n      }\n    }, \"Izmeni eksponat\")))));\n  }\n\n}\n\nexport default withRouter(EditExhibit);","map":{"version":3,"sources":["C:/MuseumAPP/museum project- faks/MuseumApp/MuseumApp.React/museum/src/components/ExhibitActions/EditExhibit.jsx"],"names":["React","withRouter","FormGroup","FormControl","Button","Container","Row","Col","FormText","NotificationManager","serviceConfig","EditExhibit","Component","constructor","props","state","name","year","picturePath","exhibitId","exhibitionId","auditoriumId","submitted","canSubmit","handleChange","bind","handleSubmit","componentDidMount","id","match","params","getExhibit","requestOptions","method","headers","localStorage","getItem","fetch","baseURL","then","response","ok","Promise","reject","json","data","setState","catch","error","message","statusText","e","value","target","preventDefault","updateExhibit","exhibitIdv","body","JSON","stringify","console","log","result","history","goBack","success","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { FormGroup, FormControl, Button, Container, Row, Col, FormText, } from 'react-bootstrap';\r\nimport { NotificationManager } from 'react-notifications';\r\nimport { serviceConfig } from '../../AppSettings';\r\n\r\nclass EditExhibit extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n            name: '',\r\n            year: 0,\r\n            picturePath: '',\r\n            exhibitId: 0,\r\n            exhibitionId: 0,\r\n            auditoriumId: 0,            \r\n            submitted: false,\r\n            canSubmit: true\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { id } = this.props.match.params; \r\n        this.getExhibit(id);\r\n    }\r\n    getExhibit(exhibitId) {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem('jwt')\r\n            }\r\n          \r\n        };\r\n    \r\n        fetch(`${serviceConfig.baseURL}/api/exhibits/get/` + exhibitId, requestOptions)\r\n            .then(response => {\r\n            if (!response.ok) {\r\n                return Promise.reject(response);\r\n            }\r\n            return response.json();\r\n            })\r\n            .then(data => {\r\n                if (data) {\r\n                    this.setState({picturePath: data.picturePath,\r\n                        exhibitId: data.exhibitId,\r\n                        exhibitionId: data.exhibitionId,\r\n                        auditoriumId: data.auditoriumId,\r\n                        year: data.year,\r\n                        name: data.name,\r\n                        id: data.id});\r\n                }\r\n            })\r\n            .catch(response => {\r\n                NotificationManager.error(response.message || response.statusText);\r\n                this.setState({ submitted: false });\r\n            });\r\n        }\r\n    handleChange(e) {\r\n        const { id, value } = e.target;\r\n        this.setState({ [id]: value });\r\n      \r\n            }\r\n\r\n\r\n    handleSubmit(e) {\r\n\r\n        e.preventDefault();\r\n        this.setState({ submitted: true });\r\n        const {auditoriumId, exhibitionId, exhibitId, name, year, picturePath} = this.state;\r\n        if (auditoriumId && exhibitionId && exhibitId && name && year && picturePath) {\r\n            this.updateExhibit();\r\n        } else {\r\n            NotificationManager.error('Molim vas popunite polje.');\r\n            this.setState({ submitted: false });\r\n        }\r\n    }\r\n \r\n    updateExhibit() {\r\n\r\n        const {auditoriumId, exhibitionId, exhibitId, name, year, picturePath} = this.state;\r\n        const data = {\r\n            auditoriumId: auditoriumId,\r\n            exhibitionId: exhibitionId,\r\n            exhibitIdv: exhibitId, \r\n            name: name,\r\n            year: +year,\r\n            picturePath: picturePath\r\n        };\r\n\r\n        const requestOptions = {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem('jwt')\r\n            },\r\n            body: JSON.stringify(data)\r\n        };\r\n\r\n        console.log(JSON.stringify(\"REQ_OPT:\" + requestOptions.body));\r\n        \r\n        fetch(`${serviceConfig.baseURL}/api/exhibits/put/${exhibitId}`, requestOptions)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    return Promise.reject(response);\r\n                }\r\n                return response.statusText;\r\n            })\r\n            .then(data => {\r\n                if(data){\r\n                    this.setState({\r\n                        name : data.name,\r\n                        year: data.year,\r\n                        picturePath: data.picturePath\r\n                    });\r\n                }\r\n            })\r\n            .then(result => {\r\n                this.props.history.goBack();\r\n                NotificationManager.success('Uspešno izmenjen eksponat!');\r\n            })\r\n            .catch(response => {\r\n                NotificationManager.error(\"Ne možete izmeniti podatke o eksponatu. \");\r\n                this.setState({ submitted: false });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const {name, year, picturePath, canSubmit , submitted} = this.state;\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <form onSubmit={this.handleSubmit}>\r\n                        \r\n                            <FormGroup>\r\n                                <FormControl\r\n                                \r\n                                    id=\"name\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"naziv\"\r\n                                    value={name}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <FormControl\r\n                                \r\n                                    id=\"year\"\r\n                                    type=\"number\"\r\n                                    placeholder=\"godina\"\r\n                                    value={year}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <FormControl\r\n                                    id=\"picturePath\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"putanja do slike\"\r\n                                    value={picturePath}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                           \r\n                            <Button  variant=\"danger\" type=\"submit\" disabled={submitted || !canSubmit} block>Izmeni eksponat</Button>\r\n                        </form>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\nexport default withRouter(EditExhibit);"]},"metadata":{},"sourceType":"module"}